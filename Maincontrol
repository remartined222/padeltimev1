<!DOCTYPE html>
<html lang="es">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Padel Time v.1</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
</head>

<body>
    <div>
        <div id="modeSelectionScreen">
            <h2>Selecciona una modalidad</h2><button id="tournamentButton">Torneo</button> <button id="gamesWonButton">****** ganados</button> <button id="exitButton">Salir</button>
        </div>
        <div id="playerInputScreen">
            <h2>******* los detalles</h2>
            <div><label for="playerNames">Nombres de los jugadores (*** por l&iacute;nea):</label> <textarea id="playerNames" rows="6" placeholder="Ejemplo:
Edwin
Toño
Rafa
Cristian"></textarea>
                <p id="playerCount">Jugadores ingresados: 0</p>
                <p id="playerInputError"><br></p>
            </div><button id="generateTeamsButton">Generar Duplas</button> <button id="backToModesButton">Volver</button>
        </div>
        <div id="tournamentDisplayScreen">
            <h2>Duplas del Torneo</h2>
            <div id="teamDisplay"><br></div><button id="startTournamentButton">Iniciar Torneo</button> <button id="backToPlayerInputButton">Volver</button>
        </div>
        <div id="matchScreen">
            <h2 id="matchTitle"><br></h2>
            <div>
                <p>Sets de juego:</p><select id="setsToPlay">&nbsp;<option value="1">1 Set</option>
                    <option value="3" selected="">3 Sets</option>
                    <option value="5">5 Sets</option>&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                </select> <button id="startMatchButton">Iniciar Juego</button>
                <div>
                    <div>
                        <div id="team1NameDisplay"><br></div>
                    </div><span>vs</span>
                    <div>
                        <div id="team2NameDisplay"><br></div>
                    </div>
                </div>
                <div>
                    <div><span>Puntos</span> <span id="scoreTeam1Points">0</span></div>
                    <div><span>Sets</span> <span id="scoreTeam1Sets">0</span></div><span>-</span>
                    <div><span>Puntos</span> <span id="scoreTeam2Points">0</span></div>
                    <div><span>Sets</span> <span id="scoreTeam2Sets">0</span></div>
                </div>
                <div><button id="addPointTeam1">Punto</button> <button id="addPointTeam2">Punto</button></div>
            </div><button id="resetScoreButton">Resetear Puntaje</button> <button id="viewTournamentSummaryButton">Ver Resumen del Torneo</button> <button id="backToTournamentDisplayButton">Volver a Duplas</button>
        </div>
        <div id="tournamentProgressScreen">
            <h2>Progreso del Torneo</h2>
            <div id="tournamentMatchesSummary"><br></div><button id="returnToMatchButton">Volver a Marcadores</button> <button id="startNextRoundButton">********* Ronda</button> <button id="backToMainFromProgress">Volver ** Inicio</button>
        </div>
        <div id="customModal">
            <div><span id="closeModalButton">&times;</span>
                <p id="modalMessage"><br></p><button id="modalOkButton">OK</button>
            </div>
        </div>
    </div>
    <script>
        // Obtener referencias a elementos del DOM
        const splashScreen = document.getElementById('splashScreen');
        const modeSelectionScreen = document.getElementById('modeSelectionScreen');
        const playerInputScreen = document.getElementById('playerInputScreen');
        const tournamentDisplayScreen = document.getElementById('tournamentDisplayScreen');
        const matchScreen = document.getElementById('matchScreen'); 
        const tournamentProgressScreen = document.getElementById('tournamentProgressScreen'); 
        
        const startButton = document.getElementById('startButton');
        const tournamentButton = document.getElementById('tournamentButton');
        const gamesWonButton = document.getElementById('gamesWonButton');
        const exitButton = document.getElementById('exitButton');
        const generateTeamsButton = document.getElementById('generateTeamsButton');
        const backToModesButton = document.getElementById('backToModesButton');
        const backToPlayerInputButton = document.getElementById('backToPlayerInputButton');
        const startTournamentButton = document.getElementById('startTournamentButton');
        const startMatchButton = document.getElementById('startMatchButton'); 
        const backToTournamentDisplayButton = document.getElementById('backToTournamentDisplayButton'); 
        const startNextRoundButton = document.getElementById('startNextRoundButton'); 
        const backToMainFromProgress = document.getElementById('backToMainFromProgress'); 
        const viewTournamentSummaryButton = document.getElementById('viewTournamentSummaryButton'); 
        const returnToMatchButton = document.getElementById('returnToMatchButton'); 
        
        const playerNamesTextarea = document.getElementById('playerNames');
        const playerCountDisplay = document.getElementById('playerCount');
        const playerInputError = document.getElementById('playerInputError');
        const teamDisplay = document.getElementById('teamDisplay');
        const tournamentMatchesSummary = document.getElementById('tournamentMatchesSummary'); 
        
        const matchTitle = document.getElementById('matchTitle');
        const setsToPlaySelect = document.getElementById('setsToPlay'); 
        
        // Referencias a los nuevos elementos para mostrar nombre y número de equipo
        const team1NumberLabel = document.getElementById('team1NumberLabel');
        const team1NameDisplay = document.getElementById('team1NameDisplay');
        const team2NumberLabel = document.getElementById('team2NumberLabel');
        const team2NameDisplay = document.getElementById('team2NameDisplay');
        
        const scoreTeam1Points = document.getElementById('scoreTeam1Points');
        const scoreTeam1Sets = document.getElementById('scoreTeam1Sets');
        const scoreTeam2Points = document.getElementById('scoreTeam2Points');
        const scoreTeam2Sets = document.getElementById('scoreTeam2Sets');
        const addPointTeam1Btn = document.getElementById('addPointTeam1');
        const addPointTeam2Btn = document.getElementById('addPointTeam2'); 
        const resetScoreButton = document.getElementById('resetScoreButton'); 
        
        
        const customModal = document.getElementById('customModal');
        const modalMessage = document.getElementById('modalMessage');
        const closeModalButton = document.getElementById('closeModalButton');
        const modalOkButton = document.getElementById('modalOkButton');
        
        let currentMode = ''; 
        let allDuplas = []; 
        let tournamentRounds = []; // Stores arrays of matches for each round
        let currentRoundIndex = 0; // Index of the current round being played
        let currentMatchIndex = 0; // Index of the current match within the current round
        
        let currentMatch = {
            team1: null,
            team2: null,
            score: {
                points: [0, 0], 
                sets: [0, 0]    
            },
            setsRequired: 3, 
            winner: null, 
            isCompleted: false 
        };
        
        // Mapeo para mostrar los puntos de pádel (0, 15, 30, 40)
        const padelPoints = [0, 15, 30, 40]; 
        
        // Función para mostrar una pantalla específica y ocultar las demás
        function showScreen(screenId) {
            const screens = [splashScreen, modeSelectionScreen, playerInputScreen, tournamentDisplayScreen, matchScreen, tournamentProgressScreen];
            screens.forEach(screen => {
                if (screen.id === screenId) {
                    screen.classList.add('active');
                } else {
                    screen.classList.remove('active');
                }
            });
        }
        
        // Función para mostrar el modal personalizado con un mensaje
        function showModal(message) {
            modalMessage.textContent = message;
            customModal.style.display = 'flex';
        }
        
        // Función para ocultar el modal personalizado
        function hideModal() {
            customModal.style.display = 'none';
        }
        
        // Función para actualizar la visualización del marcador
        function updateScoreboard() {
            scoreTeam1Points.textContent = padelPoints[currentMatch.score.points[0]];
            scoreTeam2Points.textContent = padelPoints[currentMatch.score.points[1]];
            scoreTeam1Sets.textContent = currentMatch.score.sets[0];
            scoreTeam2Sets.textContent = currentMatch.score.sets[1];
        }
        
        // Función para manejar la adición de un punto a un equipo (Lógica de Pádel simplificada)
        function addPoint(teamIndex) {
            if (currentMatch.isCompleted) {
                showModal('El partido ha terminado. Por favor, inicia el siguiente partido o resetea el puntaje.');
                return;
            }
        
            // Incrementar el contador de puntos interno (0, 1, 2, 3)
            currentMatch.score.points[teamIndex]++;
        
            // Si el equipo alcanza 4 puntos (equivalente a ganar el set en esta lógica simplificada)
            if (currentMatch.score.points[teamIndex] >= 4) {
                winSet(teamIndex);
            }
            updateScoreboard();
        }
        
        // Función para manejar la victoria de un set
        function winSet(teamIndex) {
            currentMatch.score.sets[teamIndex]++;
            const winnerTeamName = teamIndex === 0 ?
                `${currentMatch.team1[0]} + ${currentMatch.team1[1]}` :
                `${currentMatch.team2[0]} + ${currentMatch.team2[1]}`;
            showModal(`${winnerTeamName} (Equipo ${teamIndex + 1}) gana el set!`);
            
            // Reiniciar los puntos para ambos equipos para el nuevo set
            currentMatch.score.points = [0, 0]; 
            updateScoreboard(); 
            
            checkMatchWin(teamIndex);
        }
        
        // Función para verificar si se gana el partido
        function checkMatchWin(winningTeamIndex) {
            const setsNeededToWin = Math.ceil(currentMatch.setsRequired / 2);
            if (currentMatch.score.sets[winningTeamIndex] >= setsNeededToWin) {
                const winnerTeam = winningTeamIndex === 0 ? currentMatch.team1 : currentMatch.team2;
                const loserTeam = winningTeamIndex === 0 ? currentMatch.team2 : currentMatch.team1; // Get the losing team
                const winnerTeamName = `${winnerTeam[0]} + ${winnerTeam[1]}`;
                showModal(`¡El partido ha terminado! ${winnerTeamName} (Equipo ${winningTeamIndex + 1}) gana el partido!`);
                
                // Actualizar el partido en la lista de torneos con el ganador y la puntuación final
                tournamentRounds[currentRoundIndex][currentMatchIndex].winner = winnerTeam;
                tournamentRounds[currentRoundIndex][currentMatchIndex].status = 'completed';
                tournamentRounds[currentRoundIndex][currentMatchIndex].finalScore = [...currentMatch.score.sets]; // Store a copy of sets
                currentMatch.isCompleted = true; // Marcar el partido actual como completado
        
                addPointTeam1Btn.disabled = true; // Deshabilitar botones de puntuación
                addPointTeam2Btn.disabled = true;
                
                // Cambiar el texto del botón "Iniciar Juego" a "Siguiente Partido"
                startMatchButton.textContent = 'Siguiente Partido';
                startMatchButton.disabled = false; // Habilitar el botón para el siguiente partido
                
                updateTournamentSummary(); // Actualizar el resumen del torneo
            }
        }
        
        // Función para reiniciar todos los puntajes del partido actual
        function resetAllScores() {
            currentMatch.score = {
                points: [0, 0],
                sets: [0, 0]
            };
            currentMatch.isCompleted = false; // El partido ya no está completado
            updateScoreboard();
            addPointTeam1Btn.disabled = false; // Habilitar botones de puntuación
            addPointTeam2Btn.disabled = false;
            startMatchButton.textContent = 'Iniciar Juego'; // Resetear texto del botón
            startMatchButton.disabled = false; // Asegurarse de que el botón de inicio esté habilitado
            showModal('Puntaje reseteado.');
        }
        
        // Función para generar los partidos de la primera ronda del torneo
        function generateFirstRoundMatches(duplas) {
            tournamentRounds = []; // Reiniciar todas las rondas
            const firstRoundMatches = [];
            for (let i = 0; i < duplas.length; i += 2) {
                if (duplas[i + 1]) { // Asegurarse de que haya un segundo equipo
                    firstRoundMatches.push({
                        team1: duplas[i],
                        team2: duplas[i + 1],
                        winner: null,
                        status: 'pending',
                        finalScore: null // Store final score of sets [team1_sets, team2_sets]
                    });
                } else {
                    // Handle bye
                    firstRoundMatches.push({
                        team1: duplas[i],
                        team2: null, // Indicates a bye
                        winner: duplas[i], // Team with bye automatically wins this "match"
                        status: 'completed',
                        finalScore: [1, 0] // A bye is like winning 1-0 in sets
                    });
                    showModal(`Advertencia: Hay un número impar de duplas. ${duplas[i][0]} + ${duplas[i][1]} tiene un "bye" en esta ronda.`);
                }
            }
            tournamentRounds.push(firstRoundMatches); // Add the first round
            currentRoundIndex = 0; // Start at the first round
            currentMatchIndex = -1; // Prepare for loadNextMatch
        }
        
        // Función para cargar el siguiente partido
        function loadNextMatch() {
            currentMatchIndex++;
            // Check if there are more matches in the current round
            if (currentMatchIndex < tournamentRounds[currentRoundIndex].length) {
                const nextMatch = tournamentRounds[currentRoundIndex][currentMatchIndex];
        
                // If this match is already completed (e.g., a bye), skip to the next one
                if (nextMatch.status === 'completed') {
                    loadNextMatch();
                    return;
                }
        
                currentMatch.team1 = nextMatch.team1;
                currentMatch.team2 = nextMatch.team2;
                currentMatch.isCompleted = false; // Reset state for the new match
                currentMatch.winner = null; // Reset winner for the new match
        
                matchTitle.textContent = `Partido: ${currentMatch.team1[0]} + ${currentMatch.team1[1]} vs ${currentMatch.team2 ? currentMatch.team2[0] + ' + ' + currentMatch.team2[1] : 'BYE'}`;
                
                team1NumberLabel.textContent = `Equipo 1`;
                team1NameDisplay.innerHTML = `🎾 ${currentMatch.team1[0]} + ${currentMatch.team1[1]}`;
                
                team2NumberLabel.textContent = `Equipo 2`;
                team2NameDisplay.innerHTML = currentMatch.team2 ? `🎾 ${currentMatch.team2[0]} + ${currentMatch.team2[1]}` : 'BYE';
        
                resetAllScores(); // Reset the scoreboard for the new match
                startMatchButton.textContent = 'Iniciar Juego'; // Reset button text
                startMatchButton.disabled = false; // Enable start button
        
                showModal(`Siguiente partido: ${currentMatch.team1[0]} + ${currentMatch.team1[1]} vs ${currentMatch.team2[0]} + ${currentMatch.team2[1]}`);
        
            } else {
                // All matches in the current round have been played
                showModal('¡Todos los partidos de esta ronda han sido jugados! Puedes ver el progreso del torneo y generar la siguiente ronda.');
                startMatchButton.disabled = true;
                startMatchButton.textContent = 'Ronda Finalizada';
                showScreen('tournamentProgressScreen'); // Go to tournament progress screen
                updateTournamentSummary(); // Ensure summary is updated
                startNextRoundButton.disabled = false; // Enable the "Siguiente Ronda" button
            }
        }
        
        // Función para actualizar el resumen de partidos del torneo
        function updateTournamentSummary() {
            tournamentMatchesSummary.innerHTML = ''; // Limpiar contenido previo
            tournamentRounds.forEach((roundMatches, roundNum) => {
                tournamentMatchesSummary.innerHTML += `<h3>Ronda ${roundNum + 1}:</h3>`;
                roundMatches.forEach((match, index) => {
                    const team1Display = `${match.team1[0]} + ${match.team1[1]}`;
                    const team2Display = match.team2 ? `${match.team2[0]} + ${match.team2[1]}` : 'BYE';
                    let winnerDisplay = '';
                    let matchItemClass = 'match-summary-item';
                    let winnerBoxClass = 'winner-box-summary';
                    let winnerEmoji = '🏆'; // Default winner emoji
        
                    if (match.status === 'completed') {
                        winnerDisplay = `${match.winner[0]} + ${match.winner[1]}`;
                        // Check if it's the final round and this is the last match
                        if (roundNum === tournamentRounds.length - 1 && roundMatches.length === 1) { // Final round has only one match
                            winnerEmoji = '🏆👑'; // Champion emojis
                            winnerBoxClass += ' winner-box-champion'; // Apply champion specific style
                        }
                    } else {
                        winnerDisplay = 'Pendiente';
                        matchItemClass += ' pending';
                        winnerBoxClass += ' pending-winner';
                    }
        
                    tournamentMatchesSummary.innerHTML += `
                        <div>
                            <div>
                                <div>🎾 ${team1Display}</div>
                                <span>vs</span>
                                <div>🎾 ${team2Display}</div>
                            </div>
                            <div>→</div>
                            <div>${winnerEmoji} ${winnerDisplay}</div>
                        </div>
                    `;
                });
            });
        }
        
        
        // Escuchadores de eventos
        startButton.addEventListener('click', () => {
            showScreen('modeSelectionScreen');
        });
        
        tournamentButton.addEventListener('click', () => {
            currentMode = 'Torneo';
            showScreen('playerInputScreen');
            playerInputError.textContent = ''; 
            playerNamesTextarea.value = ''; 
            playerCountDisplay.textContent = 'Jugadores ingresados: 0';
        });
        
        gamesWonButton.addEventListener('click', () => {
            currentMode = 'Juegos ganados';
            showModal('La modalidad "Juegos ganados" aún no está implementada. Por favor, selecciona "Torneo".');
        });
        
        exitButton.addEventListener('click', () => {
            showModal('Gracias por usar Padel Time. ¡Hasta pronto!');
        });
        
        backToModesButton.addEventListener('click', () => {
            showScreen('modeSelectionScreen');
        });
        
        backToPlayerInputButton.addEventListener('click', () => {
            showScreen('playerInputScreen');
        });
        
        backToTournamentDisplayButton.addEventListener('click', () => {
            showScreen('tournamentDisplayScreen');
            addPointTeam1Btn.disabled = false; 
            addPointTeam2Btn.disabled = false;
        });
        
        viewTournamentSummaryButton.addEventListener('click', () => { 
            updateTournamentSummary();
            showScreen('tournamentProgressScreen');
        });
        
        returnToMatchButton.addEventListener('click', () => { 
            showScreen('matchScreen');
        });
        
        playerNamesTextarea.addEventListener('input', () => {
            const players = playerNamesTextarea.value.split('\n').filter(name => name.trim() !== '');
            playerCountDisplay.textContent = `Jugadores ingresados: ${players.length}`;
            playerInputError.textContent = ''; 
        });
        
        generateTeamsButton.addEventListener('click', () => {
            const players = playerNamesTextarea.value.split('\n').map(name => name.trim()).filter(name => name !== '');
        
            playerInputError.textContent = ''; 
        
            ** (players.length < 4) {
                playerInputError.textContent = 'Necesitas al menos 4 jugadores para formar duplas.';
                return;
            }
            if (players.length % 2 !== 0) {
                playerInputError.textContent = 'El número de jugadores debe ser par para formar duplas.';
                return;
            }
        
            // Mezclar jugadores aleatoriamente
            for (let i = players.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [players[i], players[j]] = [players[j], players[i]];
            }
        
            // Formar todas las duplas posibles a partir de los jugadores mezclados
            allDuplas = []; 
            for (let i = 0; i < players.length; i += 2) {
                allDuplas.push([players[i], players[i + 1]]);
            }
        
            displayTournamentDuplas(allDuplas);
            showScreen('tournamentDisplayScreen');
        });
        
        startTournamentButton.addEventListener('click', () => {
            if (allDuplas.length < 2) {
                showModal('Necesitas al menos 2 duplas para iniciar un partido de torneo.');
                return;
            }
            
            generateFirstRoundMatches(allDuplas); 
            currentMatchIndex = -1; // Reiniciar para que loadNextMatch cargue el primer partido
            loadNextMatch(); 
            
            showScreen('matchScreen');
        });
        
        startMatchButton.addEventListener('click', () => {
            if (currentMatch.isCompleted) { 
                loadNextMatch();
            } else { 
                currentMatch.setsRequired = parseInt(setsToPlaySelect.value, 10);
                showModal(`¡El juego ha iniciado! Se jugarán al mejor de ${currentMatch.setsRequired} sets.`);
                currentMatch.score = {
                    points: [0, 0],
                    sets: [0, 0]
                };
                updateScoreboard();
                addPointTeam1Btn.disabled = false; 
                addPointTeam2Btn.disabled = false;
                startMatchButton.disabled = true; 
            }
        });
        
        addPointTeam1Btn.addEventListener('click', () => addPoint(0));
        addPointTeam2Btn.addEventListener('click', () => addPoint(1));
        resetScoreButton.addEventListener('click', resetAllScores); 
        startNextRoundButton.addEventListener('click', () => {
            // Disable the button immediately to prevent multiple clicks
            startNextRoundButton.disabled = true;
        
            // 1. Get Winners and Losers from the current round
            const currentRoundMatches = tournamentRounds[currentRoundIndex];
            const roundWinners = [];
            const roundLosers = []; // Store objects: { team: [player1, player2], setsLost: number }
        
            currentRoundMatches.forEach(match => {
                if (match.status === 'completed') {
                    roundWinners.push(match.winner);
                    // Identify the loser and their sets won (if not a bye)
                    if (match.team2 !== null) { // Not a bye
                        const loserIndex = (match.winner === match.team1) ? 1 : 0;
                        const losingTeam = (loserIndex === 0) ? match.team1 : match.team2;
                        const setsWonByLoser = match.finalScore[loserIndex];
                        roundLosers.push({ team: losingTeam, setsWon: setsWonByLoser });
                    }
                }
            });
        
            // Handle the end of the tournament
            if (roundWinners.length === 1) {
                showModal(`¡El torneo ha terminado! El campeón es: ${roundWinners[0][0]} + ${roundWinners[0][1]}`);
                updateTournamentSummary(); // Update to show champion emoji
                return; // End of tournament
            }
        
            let nextRoundParticipants = [...roundWinners];
        
            // 2. Handle "lucky loser" scenario if needed (e.g., 3 winners for a 4-team semifinal)
            if (roundWinners.length === 3) {
                if (roundLosers.length > 0) {
                    // Sort losers by sets won (descending), then pick the first one
                    roundLosers.sort((a, b) => b.setsWon - a.setsWon);
                    const luckyLoser = roundLosers[0].team;
                    nextRoundParticipants.push(luckyLoser);
                    showModal(`¡Un equipo perdedor avanza! El equipo de "lucky loser" es: ${luckyLoser[0]} + ${luckyLoser[1]}`);
                } else {
                    showModal('Advertencia: No hay perdedores disponibles para un "lucky loser". Se necesitará un "bye".');
                    // If no losers, a bye will be implicitly handled in pairing
                }
            }
        
            // Shuffle participants for new pairings
            for (let i = nextRoundParticipants.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [nextRoundParticipants[i], nextRoundParticipants[j]] = [nextRoundParticipants[j], nextRoundParticipants[i]];
            }
        
            // 3. Generate new matches for the next round
            const newRoundMatches = [];
            for (let i = 0; i < nextRoundParticipants.length; i += 2) {
                if (nextRoundParticipants[i + 1]) {
                    newRoundMatches.push({
                        team1: nextRoundParticipants[i],
                        team2: nextRoundParticipants[i + 1],
                        winner: null,
                        status: 'pending',
                        finalScore: null
                    });
                } else {
                    // Handle bye for the new round
                    newRoundMatches.push({
                        team1: nextRoundParticipants[i],
                        team2: null,
                        winner: nextRoundParticipants[i],
                        status: 'completed',
                        finalScore: [1, 0]
                    });
                    showModal(`Advertencia: Un equipo (${nextRoundParticipants[i][0]} + ${nextRoundParticipants[i][1]}) avanza por "bye" en la siguiente ronda.`);
                }
            }
        
            if (newRoundMatches.length === 0) {
                showModal('No se pudieron generar partidos para la siguiente ronda. El torneo puede haber terminado o no hay suficientes equipos.');
                return;
            }
        
            // 4. Update Tournament State
            tournamentRounds.push(newRoundMatches); // Add the new round
            currentRoundIndex++; // Move to the next round
            currentMatchIndex = -1; // Prepare to load the first match of the new round
        
            showModal(`¡Comienza la Ronda ${currentRoundIndex + 1}!`);
            loadNextMatch(); // Load the first match of the new round
            showScreen('matchScreen'); // Go back to the match screen
        });
        backToMainFromProgress.addEventListener('click', () => {
            showScreen('modeSelectionScreen');
        });
        
        
        closeModalButton.addEventListener('click', hideModal);
        modalOkButton.addEventListener('click', hideModal);
        window.addEventListener('click', (event) => {
            if (event.target == customModal) {
                hideModal();
            }
        });
        
        // Función para mostrar todas las duplas formadas para el modo torneo
        function displayTournamentDuplas(duplas) {
            teamDisplay.innerHTML = ''; 
        
            if (duplas.length === 0) {
                teamDisplay.innerHTML = '<p>** se pudieron ****** duplas con los ********* ingresados.</p>';
                return;
            }
        
            // Crear emparejamientos (ej. Equipo 1 vs Equipo 2)
            for (let i = 0; i < duplas.length; i += 2) {
                const team1 = duplas[i];
                const team2 = duplas[i + 1]; 
        
                const matchCardDiv = document.createElement('div');
                matchCardDiv.classList.add('match-card');
        
                if (team2) { 
                    matchCardDiv.innerHTML = `
                        <div>
                            <div>🎾 Equipo ${i / 2 + 1}: ${team1[0]} + ${team1[1]}</div>
                        </div>
                        <div>
                            <span>VS</span>
                        </div>
                        <div>
                            <div>🎾 Equipo ${i / 2 + 2}: ${team2[0]} + ${team2[1]}</div>
                        </div>
                    `;
                } else { 
                    matchCardDiv.innerHTML = `
                        <div>
                            <div>🎾 Equipo ${i / 2 + 1}: ${team1[0]} + ${team1[1]}</div>
                        </div>
                        <div>
                            <span>BYE</span>
                        </div>
                        <div>
                            <div>Esperando oponente...</div>
                        </div>
                    `;
                }
                teamDisplay.appendChild(matchCardDiv);
            }
        }
        
        // Configuración inicial de la pantalla
        showScreen('splashScreen');
    </script>

<div style="color: red; font-size: 12px; width: 600px; margin: 0 auto; text-align: center;">Prueba Word to HTML - <a href="https://wordtohtml.net/site/payment">P&aacute;sate a PRO</a>.</div>
</body>

</html>
